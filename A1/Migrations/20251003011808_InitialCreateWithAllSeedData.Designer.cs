// <auto-generated />
using System;
using A1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace A1.Migrations
{
    [DbContext(typeof(A1Context))]
    [Migration("20251003011808_InitialCreateWithAllSeedData")]
    partial class InitialCreateWithAllSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("A1.Models.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("Id");

                    b.ToTable("Atendimentos");

                    b.HasDiscriminator().HasValue("Atendimento");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("A1.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("A1.Models.Ingrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Tomate"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Queijo Mussarela"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Manjericão"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Massa de Pizza"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Frango Desfiado"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Catupiry"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Pão de Hambúrguer"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Carne de Hambúrguer"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Alface"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Bacon"
                        });
                });

            modelBuilder.Entity("A1.Models.ItemCardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Periodo")
                        .HasColumnType("int");

                    b.Property<double>("PrecoBase")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ItensCardapio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Feijoada tradicional com arroz, couve, farofa e laranja.",
                            Nome = "Feijoada Completa",
                            Periodo = 0,
                            PrecoBase = 55.0
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Filé de frango empanado, coberto com queijo e molho de tomate. Acompanha arroz e fritas.",
                            Nome = "Frango a Parmegiana",
                            Periodo = 0,
                            PrecoBase = 48.0
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Alface romana, croutons, queijo parmesão e tiras de frango grelhado.",
                            Nome = "Salada Caesar com Frango",
                            Periodo = 0,
                            PrecoBase = 42.0
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Molho de tomate, mussarela fresca e manjericão.",
                            Nome = "Pizza Margherita",
                            Periodo = 1,
                            PrecoBase = 60.0
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Arroz arbóreo cremoso com mix de cogumelos frescos.",
                            Nome = "Risoto de Cogumelos",
                            Periodo = 1,
                            PrecoBase = 65.0
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Pão brioche, hambúrguer de 180g, queijo cheddar, bacon e salada.",
                            Nome = "Hambúrguer Gourmet",
                            Periodo = 1,
                            PrecoBase = 50.0
                        });
                });

            modelBuilder.Entity("A1.Models.ItemIngrediente", b =>
                {
                    b.Property<int>("ItemCardapioId")
                        .HasColumnType("int");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int");

                    b.HasKey("ItemCardapioId", "IngredienteId");

                    b.HasIndex("IngredienteId");

                    b.ToTable("ItemIngredientes");

                    b.HasData(
                        new
                        {
                            ItemCardapioId = 4,
                            IngredienteId = 1
                        },
                        new
                        {
                            ItemCardapioId = 4,
                            IngredienteId = 2
                        },
                        new
                        {
                            ItemCardapioId = 4,
                            IngredienteId = 3
                        },
                        new
                        {
                            ItemCardapioId = 4,
                            IngredienteId = 4
                        },
                        new
                        {
                            ItemCardapioId = 6,
                            IngredienteId = 7
                        },
                        new
                        {
                            ItemCardapioId = 6,
                            IngredienteId = 8
                        },
                        new
                        {
                            ItemCardapioId = 6,
                            IngredienteId = 9
                        },
                        new
                        {
                            ItemCardapioId = 6,
                            IngredienteId = 10
                        });
                });

            modelBuilder.Entity("A1.Models.Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacidade = 4,
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacidade = 4,
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacidade = 2,
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Capacidade = 2,
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Capacidade = 6,
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Capacidade = 8,
                            Numero = 6
                        });
                });

            modelBuilder.Entity("A1.Models.ParceiroApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParceirosApp");
                });

            modelBuilder.Entity("A1.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtendimentoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("A1.Models.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemCardapioId")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("PedidoId");

                    b.ToTable("PedidoItens");
                });

            modelBuilder.Entity("A1.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoConfirmacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Horario")
                        .HasColumnType("time");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPessoas")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MesaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("A1.Models.SugestaoDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<int>("ItemCardapioId")
                        .HasColumnType("int");

                    b.Property<int>("Periodo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCardapioId");

                    b.HasIndex("Data", "Periodo")
                        .IsUnique();

                    b.ToTable("SugestoesDiarias");
                });

            modelBuilder.Entity("A1.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e8e011d-7fde-4b16-8078-6775d7fca57e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3aef999-96de-4a7f-9c67-abcdef123456",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nome = "Administrador",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENxiM+eS0Ag9KL6O40a1TEUpV+jH0nxCFioLIPdrOJ9Y5x2Sx28OaWLn8dHwCML5nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6f5c999-46de-4a7f-9c67-123456789abc",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f4dbf4dd-1df8-4e6a-9a15-abc123456789",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3b14a6f1-ef0b-4c89-b6b0-def987654321",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1e8e011d-7fde-4b16-8078-6775d7fca57e",
                            RoleId = "f4dbf4dd-1df8-4e6a-9a15-abc123456789"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("A1.Models.AtendimentoDeliveryAplicativo", b =>
                {
                    b.HasBaseType("A1.Models.Atendimento");

                    b.Property<decimal>("ComissaoParceiro")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ParceiroAppId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxaParceiro")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("ParceiroAppId");

                    b.HasDiscriminator().HasValue("AtendimentoDeliveryAplicativo");
                });

            modelBuilder.Entity("A1.Models.Endereco", b =>
                {
                    b.HasOne("A1.Models.Usuario", "Usuario")
                        .WithMany("Enderecos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("A1.Models.ItemIngrediente", b =>
                {
                    b.HasOne("A1.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItemIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1.Models.ItemCardapio", "ItemCardapio")
                        .WithMany("ItemIngredientes")
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("ItemCardapio");
                });

            modelBuilder.Entity("A1.Models.Pedido", b =>
                {
                    b.HasOne("A1.Models.Atendimento", "Atendimento")
                        .WithOne("Pedido")
                        .HasForeignKey("A1.Models.Pedido", "AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1.Models.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("A1.Models.PedidoItem", b =>
                {
                    b.HasOne("A1.Models.ItemCardapio", "ItemCardapio")
                        .WithMany()
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1.Models.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCardapio");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("A1.Models.Reserva", b =>
                {
                    b.HasOne("A1.Models.Mesa", "Mesa")
                        .WithMany("Reservas")
                        .HasForeignKey("MesaId");

                    b.HasOne("A1.Models.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Mesa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("A1.Models.SugestaoDiaria", b =>
                {
                    b.HasOne("A1.Models.ItemCardapio", "ItemCardapio")
                        .WithMany()
                        .HasForeignKey("ItemCardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCardapio");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("A1.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("A1.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("A1.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("A1.Models.AtendimentoDeliveryAplicativo", b =>
                {
                    b.HasOne("A1.Models.ParceiroApp", "ParceiroApp")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ParceiroAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParceiroApp");
                });

            modelBuilder.Entity("A1.Models.Atendimento", b =>
                {
                    b.Navigation("Pedido")
                        .IsRequired();
                });

            modelBuilder.Entity("A1.Models.Ingrediente", b =>
                {
                    b.Navigation("ItemIngredientes");
                });

            modelBuilder.Entity("A1.Models.ItemCardapio", b =>
                {
                    b.Navigation("ItemIngredientes");
                });

            modelBuilder.Entity("A1.Models.Mesa", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("A1.Models.ParceiroApp", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("A1.Models.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("A1.Models.Usuario", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Pedidos");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
